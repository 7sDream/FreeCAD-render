OpenShadingLanguage 1.00
# Compiled by oslc 1.11.14
# options: 
shader PyLa
param	closure color	Base			%read{52,52} %write{0,0} %initexpr
param	closure color	Layer			%read{56,56} %write{2147483647,-1}
param	float	Opacity	0.5		%read{40,40} %write{2147483647,-1}
param	float	depth	2		%read{7,7} %write{2147483647,-1}
param	float	Fresnel	0.5		%read{41,42} %write{2147483647,-1}
param	float	IoR	1.5		%read{15,15} %write{2147483647,-1}
param	float	MaskLayer	1		%read{40,40} %write{2147483647,-1}
param	float	Secondary_Layer	1		%read{2,53} %write{2147483647,-1}
oparam	closure color	Layered			%read{2147483647,-1} %write{1,56} %initexpr
oparam	float	layermix	0.5		%read{2147483647,-1} %write{49,49}
global	vector	I	%read{9,13} %write{2147483647,-1}
global	normal	N	%read{0,13} %write{2147483647,-1}
local	float	___330_c	%read{17,29} %write{14,14}
local	float	___330_g	%read{19,28} %write{18,21}
local	float	___330_result	%read{38,38} %write{36,37}
local	float	___331_A	%read{32,33} %write{24,24}
local	float	___331_B	%read{34,34} %write{31,31}
local	float	Optim_Secondary	%read{4,4} %write{2,2}
local	int	RTdirect	%read{5,5} %write{3,3}
local	int	Optimise	%read{6,6} %write{5,5}
local	float	___333_InvDepth	%read{11,39} %write{8,8}
local	float	___333_incidence	%read{43,43} %write{11,11}
local	float	___333_fresnelincidence	%read{41,41} %write{39,39}
local	float	___333_MixLayer	%read{49,49} %write{48,48}
const	string	$const1	"diffuse"		%read{0,1} %write{2147483647,-1}
const	string	$const2	"camera"		%read{3,3} %write{2147483647,-1}
const	float	$const3	0		%read{4,55} %write{2147483647,-1}
temp	int	$tmp1	%read{5,5} %write{4,4}
const	float	$const4	1		%read{8,50} %write{2147483647,-1}
temp	float	$tmp2	%read{8,8} %write{7,7}
const	float	$const5	0.00999999978		%read{7,7} %write{2147483647,-1}
temp	float	$tmp3	%read{10,10} %write{9,9}
temp	float	$tmp4	%read{11,11} %write{10,10}
temp	float	$tmp5	%read{39,39} %write{38,38}
const	string	$const6	"fresnel_dielectric"		%read{12,12} %write{2147483647,-1}
temp	float	$tmp6	%read{14,14} %write{13,13}
temp	float	$tmp7	%read{16,16} %write{15,15}
temp	float	$tmp8	%read{18,18} %write{16,16}
temp	float	$tmp9	%read{18,18} %write{17,17}
const	int	$const8	0		%read{19,19} %write{2147483647,-1}
temp	int	$tmp10	%read{20,20} %write{19,19}
temp	float	$tmp11	%read{24,24} %write{22,22}
temp	float	$tmp12	%read{24,24} %write{23,23}
temp	float	$tmp13	%read{26,26} %write{25,25}
temp	float	$tmp14	%read{27,27} %write{26,26}
temp	float	$tmp15	%read{31,31} %write{27,27}
temp	float	$tmp16	%read{29,29} %write{28,28}
temp	float	$tmp17	%read{30,30} %write{29,29}
temp	float	$tmp18	%read{31,31} %write{30,30}
const	float	$const9	0.5		%read{32,32} %write{2147483647,-1}
temp	float	$tmp19	%read{33,33} %write{32,32}
temp	float	$tmp20	%read{36,36} %write{33,33}
temp	float	$tmp21	%read{35,35} %write{34,34}
temp	float	$tmp22	%read{36,36} %write{35,35}
temp	float	$tmp23	%read{45,45} %write{40,40}
temp	float	$tmp24	%read{44,44} %write{41,41}
temp	float	$tmp25	%read{43,43} %write{42,42}
temp	float	$tmp26	%read{44,44} %write{43,43}
temp	float	$tmp27	%read{45,45} %write{44,44}
temp	float	$tmp28	%read{47,47} %write{45,45}
const	string	$const10	"clamp"		%read{46,46} %write{2147483647,-1}
temp	float	$tmp29	%read{48,48} %write{47,47}
temp	int	$tmp30	%read{51,51} %write{50,50}
const	float	$const11	3		%read{53,53} %write{2147483647,-1}
temp	int	$tmp31	%read{54,54} %write{53,53}
code Base
# pyla.osl:122
#   closure color Base = diffuse(N),
	closure		Base $const1 N 	%filename{"pyla.osl"} %line{122} %argrw{"wrr"}
code Layered
# pyla.osl:131
#   output closure color Layered = diffuse(N),
	closure		Layered $const1 N 	%filename{"pyla.osl"} %line{131} %argrw{"wrr"}
code ___main___
# pyla.osl:136
#   float Optim_Secondary = Secondary_Layer;
	assign		Optim_Secondary Secondary_Layer 	%filename{"pyla.osl"} %line{136} %argrw{"wr"}
# pyla.osl:138
#   int RTdirect = raytype("camera");
	raytype		RTdirect $const2 	%line{138} %argrw{"wr"}
# pyla.osl:140
#   int Optimise = (RTdirect) | (Optim_Secondary == 0.0);
	eq		$tmp1 Optim_Secondary $const3 	%line{140} %argrw{"wrr"}
	bitor		Optimise RTdirect $tmp1 	%argrw{"wrr"}
# pyla.osl:142
#   if (Optimise)
	if		Optimise 50 57 	%line{142} %argrw{"r"}
# pyla.osl:145
#     float InvDepth = 1.0 / max(depth, 0.01);
	max		$tmp2 depth $const5 	%line{145} %argrw{"wrr"}
	div		___333_InvDepth $const4 $tmp2 	%argrw{"wrr"}
# pyla.osl:146
#     float incidence = pow((1.0 - dot(I, N)), InvDepth);
	dot		$tmp3 I N 	%line{146} %argrw{"wrr"}
	sub		$tmp4 $const4 $tmp3 	%argrw{"wrr"}
	pow		___333_incidence $tmp4 ___333_InvDepth 	%argrw{"wrr"}
# pyla.osl:147
#     float fresnelincidence = pow(fresnel_dielectric(I, N, IoR), InvDepth);
	functioncall	$const6 39 	%line{147} %argrw{"r"}
# pyla.osl:105
#   float c = fabs(dot(Incoming, Normal));
	dot		$tmp6 I N 	%line{105} %argrw{"wrr"}
	fabs		___330_c $tmp6 	%argrw{"wr"}
# pyla.osl:106
#   float g = eta * eta - 1 + c * c;
	mul		$tmp7 IoR IoR 	%line{106} %argrw{"wrr"}
	sub		$tmp8 $tmp7 $const4 	%argrw{"wrr"}
	mul		$tmp9 ___330_c ___330_c 	%argrw{"wrr"}
	add		___330_g $tmp8 $tmp9 	%argrw{"wrr"}
# pyla.osl:109
#   if (g > 0) {
	gt		$tmp10 ___330_g $const8 	%line{109} %argrw{"wrr"}
	if		$tmp10 37 38 	%argrw{"r"}
# pyla.osl:110
#     g = sqrt(g);
	sqrt		___330_g ___330_g 	%line{110} %argrw{"wr"}
# pyla.osl:111
#     float A = (g - c) / (g + c);
	sub		$tmp11 ___330_g ___330_c 	%line{111} %argrw{"wrr"}
	add		$tmp12 ___330_g ___330_c 	%argrw{"wrr"}
	div		___331_A $tmp11 $tmp12 	%argrw{"wrr"}
# pyla.osl:112
#     float B = (c * (g + c) - 1) / (c * (g - c) + 1);
	add		$tmp13 ___330_g ___330_c 	%line{112} %argrw{"wrr"}
	mul		$tmp14 ___330_c $tmp13 	%argrw{"wrr"}
	sub		$tmp15 $tmp14 $const4 	%argrw{"wrr"}
	sub		$tmp16 ___330_g ___330_c 	%argrw{"wrr"}
	mul		$tmp17 ___330_c $tmp16 	%argrw{"wrr"}
	add		$tmp18 $tmp17 $const4 	%argrw{"wrr"}
	div		___331_B $tmp15 $tmp18 	%argrw{"wrr"}
# pyla.osl:113
#     result = 0.5 * A * A * (1 + B * B);
	mul		$tmp19 $const9 ___331_A 	%line{113} %argrw{"wrr"}
	mul		$tmp20 $tmp19 ___331_A 	%argrw{"wrr"}
	mul		$tmp21 ___331_B ___331_B 	%argrw{"wrr"}
	add		$tmp22 $const4 $tmp21 	%argrw{"wrr"}
	mul		___330_result $tmp20 $tmp22 	%argrw{"wrr"}
# pyla.osl:115
#     result = 1.0;  // TIR (no refracted component)
	assign		___330_result $const4 	%line{115} %argrw{"wr"}
# pyla.osl:118
#   return result;
	assign		$tmp5 ___330_result 	%line{118} %argrw{"wr"}
# pyla.osl:147
#     float fresnelincidence = pow(fresnel_dielectric(I, N, IoR), InvDepth);
	pow		___333_fresnelincidence $tmp5 ___333_InvDepth 	%line{147} %argrw{"wrr"}
# pyla.osl:151
#       MaskLayer * Opacity * ((Fresnel * fresnelincidence) + (1.0 - Fresnel) * incidence),
	mul		$tmp23 MaskLayer Opacity 	%line{151} %argrw{"wrr"}
	mul		$tmp24 Fresnel ___333_fresnelincidence 	%argrw{"wrr"}
	sub		$tmp25 $const4 Fresnel 	%argrw{"wrr"}
	mul		$tmp26 $tmp25 ___333_incidence 	%argrw{"wrr"}
	add		$tmp27 $tmp24 $tmp26 	%argrw{"wrr"}
	mul		$tmp28 $tmp23 $tmp27 	%argrw{"wrr"}
# pyla.osl:150
#     float MixLayer = clamp(
	functioncall	$const10 49 	%line{150} %argrw{"r"}
# /usr/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp29 $tmp28 $const4 	%filename{"/usr/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___333_MixLayer $tmp29 $const3 	%argrw{"wrr"}
# pyla.osl:155
#     layermix = MixLayer;
	assign		layermix ___333_MixLayer 	%filename{"pyla.osl"} %line{155} %argrw{"wr"}
# pyla.osl:157
#     if (Secondary_Layer == 1.0)
	eq		$tmp30 Secondary_Layer $const4 	%line{157} %argrw{"wrr"}
	if		$tmp30 53 57 	%argrw{"r"}
# pyla.osl:159
#       Layered = Base;
	assign		Layered Base 	%line{159} %argrw{"wr"}
# pyla.osl:161
#       if (Secondary_Layer == 3.0)
	eq		$tmp31 Secondary_Layer $const11 	%line{161} %argrw{"wrr"}
	if		$tmp31 56 57 	%argrw{"r"}
# pyla.osl:163
#         Layered = 0.0;
	assign		Layered $const3 	%line{163} %argrw{"wr"}
# pyla.osl:165
#         Layered = Layer;
	assign		Layered Layer 	%line{165} %argrw{"wr"}
	end

OpenShadingLanguage 1.00
# Compiled by oslc 1.11.14
# options: -O2 -DNDEBUG -I/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders/ -I/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/include -o /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders/appleseed/as_metal.oso
shader as_metal	%meta{string,icon,"asMetal.png"} %meta{string,help,"A metal material shader."} %meta{string,URL,"https://appleseed.readthedocs.io/projects/appleseed-maya/en/latest/shaders/material/as_metal.html"} %meta{string,as_node_name,"asMetal"} %meta{string,as_category,"shader"} %meta{string,as_max_class_id,"121203873 1478432054"} %meta{string,as_max_plugin_type,"material"} %meta{int,as_maya_type_id,1210873} %meta{string,as_maya_classification,"drawdb/shader/surface:rendernode/appleseed/surface:shader/surface:swatch/AppleseedRenderSwatch"} 
param	color	in_face_reflectance	0.959999979 0.800000012 0.0500000007		%meta{string,as_maya_attribute_name,"faceReflectance"} %meta{string,as_maya_attribute_short_name,"f0"} %meta{string,label,"Face Reflectance"} %meta{string,page,"Fresnel"} %meta{string,help,"Reflectance at normal incidence."} %meta{int,as_max_param_id,0}  %read{99,99} %write{2147483647,-1}
param	color	in_edge_reflectance	1 1 1		%meta{string,as_maya_attribute_name,"edgeReflectance"} %meta{string,as_maya_attribute_short_name,"f90"} %meta{string,label,"Edge Reflectance"} %meta{string,page,"Fresnel"} %meta{string,help,"Reflectance at grazing incidence."} %meta{int,as_max_param_id,2}  %read{99,99} %write{2147483647,-1}
param	float	in_edge_reflectance_weight	0		%meta{string,as_maya_attribute_name,"edgeReflectanceWeight"} %meta{string,as_maya_attribute_short_name,"f90w"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Edge Reflectance Weight"} %meta{string,page,"Fresnel"} %meta{string,help,"Edge reflectance weight."} %meta{int,as_max_param_id,26} %meta{int,divider,1}  %read{99,99} %write{2147483647,-1}
param	int	in_distribution	0		%meta{string,as_maya_attribute_name,"distribution"} %meta{string,as_maya_attribute_short_name,"mdf"} %meta{string,widget,"null"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,as_deprecated,1} %meta{int,as_max_param_id,4}  %read{20,23} %write{2147483647,-1}
param	float	in_roughness	0.25		%meta{string,as_maya_attribute_name,"roughness"} %meta{string,as_maya_attribute_short_name,"ro"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Roughness"} %meta{string,page,"Specular"} %meta{int,as_max_param_id,5}  %read{99,99} %write{2147483647,-1}
param	float	in_energy_compensation	1		%meta{string,as_maya_attribute_name,"energyCompensation"} %meta{string,as_maya_attribute_short_name,"ec"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Energy Compensation"} %meta{string,page,"Specular"} %meta{string,help,"Energy compensation, to account for energy loss with high roughness. Valid for Beckmann and GGX MDF only."} %meta{string,widget,"null"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{99,99} %write{2147483647,-1}
param	float	in_anisotropy_amount	0		%meta{string,as_maya_attribute_name,"anisotropyAmount"} %meta{string,as_maya_attribute_short_name,"anw"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Anisotropy Amount"} %meta{string,page,"Specular.Anisotropy"} %meta{int,as_max_param_id,7}  %read{28,99} %write{2147483647,-1}
param	float	in_anisotropy_angle	0		%meta{string,as_maya_attribute_name,"anisotropyAngle"} %meta{string,as_maya_attribute_short_name,"ana"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Anisotropy Angle"} %meta{string,page,"Specular.Anisotropy"} %meta{string,help,"Anisotropy angle in [0,1], mapping to [0,360] degrees."} %meta{int,divider,1} %meta{int,as_max_param_id,9}  %read{44,46} %write{2147483647,-1}
param	int	in_anisotropy_mode	0		%meta{string,as_maya_attribute_name,"anisotropyMode"} %meta{string,as_maya_attribute_short_name,"anm"} %meta{string,widget,"mapper"} %meta{string,options,"Anisotropy Map:0|Explicit Vector:1"} %meta{string,label,"Anisotropy Mode"} %meta{string,page,"Specular.Anisotropy"} %meta{string,help,"Use tangent vector field map, or explicit vector."} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,divider,1} %meta{int,as_max_param_id,11}  %read{30,30} %write{2147483647,-1}
param	color	in_anisotropy_map	0 0 0		%meta{string,as_maya_attribute_name,"anisotropyMap"} %meta{string,as_maya_attribute_short_name,"ama"} %meta{string,label,"Anisotropy Vector Map"} %meta{string,page,"Specular.Anisotropy"} %meta{string,help,"Anisotropy vector map, with XY encoded in RG channels."} %meta{int,divider,1} %meta{int,as_max_param_id,12}  %read{32,34} %write{2147483647,-1}
param	vector	in_anisotropy_direction	0 0 0		%meta{string,as_maya_attribute_name,"anisotropyDirection"} %meta{string,as_maya_attribute_short_name,"and"} %meta{string,label,"Anisotropy Vector"} %meta{string,page,"Specular.Anisotropy"} %meta{string,help,"Explicit anisotropy vector, such as the vector output by a tangent field node."} %meta{int,as_max_param_id,14}  %read{43,43} %write{2147483647,-1}
param	normal	in_bump_normal	0 0 0		%meta{string,as_maya_attribute_name,"normalCamera"} %meta{string,as_maya_attribute_short_name,"n"} %meta{string,label,"Bump Normal"} %meta{string,page,"Bump"} %meta{string,help,"The default bump normal."} %meta{int,as_max_param_id,16}  %read{27,27} %write{0,0} %initexpr
param	int	in_enable_matte	0		%meta{string,as_maya_attribute_name,"enableMatte"} %meta{string,as_maya_attribute_short_name,"ema"} %meta{string,widget,"checkBox"} %meta{string,label,"Enable Matte Opacity"} %meta{string,page,"Matte Opacity"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,divider,1} %meta{int,as_max_param_id,17}  %read{3,3} %write{2147483647,-1}
param	float	in_matte_opacity	0		%meta{string,as_maya_attribute_name,"matteOpacity"} %meta{string,as_maya_attribute_short_name,"mao"} %meta{float,min,0} %meta{float,max,1} %meta{string,label,"Matte Opacity"} %meta{string,page,"Matte Opacity"} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,as_max_param_id,18}  %read{4,4} %write{2147483647,-1}
param	color	in_matte_opacity_color	1 0.5 0		%meta{string,as_maya_attribute_name,"matteOpacityColor"} %meta{string,as_maya_attribute_short_name,"mac"} %meta{string,label,"Matte Opacity Color"} %meta{string,page,"Matte Opacity"} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,as_max_param_id,20}  %read{4,4} %write{2147483647,-1}
param	int	in_maximum_ray_depth	100		%meta{string,as_maya_attribute_name,"maximumRayDepth"} %meta{string,as_maya_attribute_short_name,"mrd"} %meta{int,min,0} %meta{int,max,100} %meta{int,softmax,16} %meta{string,label,"Ray Depth"} %meta{string,page,"Advanced"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,as_max_param_id,22}  %read{15,15} %write{2147483647,-1}
param	vector	Tn	0 0 0		%meta{int,lockgeom,0} %meta{int,as_maya_attribute_hidden,1} %meta{string,widget,"null"} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{26,38} %write{2147483647,-1}
param	vector	Bn	0 0 0		%meta{int,lockgeom,0} %meta{int,as_maya_attribute_hidden,1} %meta{string,widget,"null"} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{40,40} %write{2147483647,-1}
oparam	closure color	out_outColor			%meta{string,as_maya_attribute_name,"outColor"} %meta{string,as_maya_attribute_short_name,"oc"} %meta{string,widget,"null"} %meta{int,as_max_param_id,25}  %read{5,100} %write{5,100}
oparam	closure color	out_outMatteOpacity			%meta{string,as_maya_attribute_name,"outMatteOpacity"} %meta{string,as_maya_attribute_short_name,"om"} %meta{string,widget,"null"} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0} %meta{int,as_max_param_id,25}  %read{5,5} %write{4,4}
global	normal	N	%read{0,0} %write{2147483647,-1}
local	vector	___254_axis	%read{53,55} %write{50,50}
local	float	___254_cosang	%read{52,93} %write{51,51}
local	float	___254_sinang	%read{63,88} %write{51,51}
local	float	___254_cosang1	%read{62,87} %write{52,52}
local	float	___254_x	%read{56,88} %write{53,53}
local	float	___254_y	%read{61,86} %write{54,54}
local	float	___254_z	%read{63,91} %write{55,55}
local	matrix	___254_M	%read{97,97} %write{95,95}
local	int	ray_depth	%read{15,15} %write{10,11}
local	int	status	%read{12,12} %write{11,11}
local	string	distribution	%read{2147483647,-1} %write{22,25}
local	vector	tangent	%read{96,99} %write{26,98}
local	normal	Nn	%read{47,99} %write{27,27}
local	vector	___377_vector_map	%read{37,39} %write{36,36}
temp	int	$tmp1	%read{2,2} %write{1,1}
const	string	$const1	"transparency"		%read{1,1} %write{2147483647,-1}
const	string	$const2	"as_matte"		%read{4,4} %write{2147483647,-1}
temp	int	$tmp2	%read{8,8} %write{7,7}
const	string	$const3	"shadow"		%read{7,7} %write{2147483647,-1}
const	int	$const4	0		%read{10,53} %write{2147483647,-1}
const	string	$const5	"path:ray_depth"		%read{11,11} %write{2147483647,-1}
temp	int	$tmp3	%read{13,13} %write{12,12}
temp	int	$tmp4	%read{14,18} %write{13,17}
temp	int	$tmp5	%read{16,16} %write{15,15}
temp	int	$tmp6	%read{17,17} %write{16,16}
temp	int	$tmp7	%read{21,21} %write{20,20}
const	string	$const6	"beckmann"		%read{22,22} %write{2147483647,-1}
const	int	$const7	1		%read{23,54} %write{2147483647,-1}
temp	int	$tmp8	%read{24,24} %write{23,23}
const	string	$const8	"ggx"		%read{25,25} %write{2147483647,-1}
const	float	$const9	0		%read{28,95} %write{2147483647,-1}
temp	int	$tmp9	%read{29,29} %write{28,28}
temp	int	$tmp10	%read{31,31} %write{30,30}
temp	int	$tmp11	%read{33,33} %write{32,32}
const	float	$const10	2		%read{34,34} %write{2147483647,-1}
temp	vector	$tmp12	%read{35,35} %write{34,34}
const	float	$const11	1		%read{35,95} %write{2147483647,-1}
temp	vector	$tmp13	%read{36,36} %write{35,35}
temp	float	$tmp14	%read{38,38} %write{37,37}
temp	vector	$tmp15	%read{41,41} %write{38,38}
temp	float	$tmp16	%read{40,40} %write{39,39}
temp	vector	$tmp17	%read{41,41} %write{40,40}
temp	vector	$tmp18	%read{42,42} %write{41,41}
temp	int	$tmp19	%read{45,45} %write{44,44}
const	float	$const12	6.28318548		%read{46,46} %write{2147483647,-1}
temp	float	$tmp20	%read{51,51} %write{46,46}
const	point	$const13	0 0 0		%read{49,98} %write{2147483647,-1}
temp	point	$tmp22	%read{49,49} %write{47,47}
const	string	$const14	"rotate"		%read{48,48} %write{2147483647,-1}
temp	vector	$tmp23	%read{50,50} %write{49,49}
const	int	$const15	2		%read{55,55} %write{2147483647,-1}
temp	float	$tmp24	%read{60,60} %write{56,56}
temp	float	$tmp25	%read{58,58} %write{57,57}
temp	float	$tmp26	%read{59,59} %write{58,58}
temp	float	$tmp27	%read{60,60} %write{59,59}
temp	float	$tmp28	%read{95,95} %write{60,60}
temp	float	$tmp29	%read{62,62} %write{61,61}
temp	float	$tmp30	%read{64,64} %write{62,62}
temp	float	$tmp31	%read{64,64} %write{63,63}
temp	float	$tmp32	%read{95,95} %write{64,64}
temp	float	$tmp33	%read{66,66} %write{65,65}
temp	float	$tmp34	%read{68,68} %write{66,66}
temp	float	$tmp35	%read{68,68} %write{67,67}
temp	float	$tmp36	%read{95,95} %write{68,68}
temp	float	$tmp37	%read{70,70} %write{69,69}
temp	float	$tmp38	%read{72,72} %write{70,70}
temp	float	$tmp39	%read{72,72} %write{71,71}
temp	float	$tmp40	%read{95,95} %write{72,72}
temp	float	$tmp41	%read{77,77} %write{73,73}
temp	float	$tmp42	%read{75,75} %write{74,74}
temp	float	$tmp43	%read{76,76} %write{75,75}
temp	float	$tmp44	%read{77,77} %write{76,76}
temp	float	$tmp45	%read{95,95} %write{77,77}
temp	float	$tmp46	%read{79,79} %write{78,78}
temp	float	$tmp47	%read{81,81} %write{79,79}
temp	float	$tmp48	%read{81,81} %write{80,80}
temp	float	$tmp49	%read{95,95} %write{81,81}
temp	float	$tmp50	%read{83,83} %write{82,82}
temp	float	$tmp51	%read{85,85} %write{83,83}
temp	float	$tmp52	%read{85,85} %write{84,84}
temp	float	$tmp53	%read{95,95} %write{85,85}
temp	float	$tmp54	%read{87,87} %write{86,86}
temp	float	$tmp55	%read{89,89} %write{87,87}
temp	float	$tmp56	%read{89,89} %write{88,88}
temp	float	$tmp57	%read{95,95} %write{89,89}
temp	float	$tmp58	%read{94,94} %write{90,90}
temp	float	$tmp59	%read{92,92} %write{91,91}
temp	float	$tmp60	%read{93,93} %write{92,92}
temp	float	$tmp61	%read{94,94} %write{93,93}
temp	float	$tmp62	%read{95,95} %write{94,94}
temp	vector	$tmp63	%read{98,98} %write{97,97}
temp	vector	$tmp64	%read{97,97} %write{96,96}
temp	closure color	$tmp65	%read{100,100} %write{99,99}
const	string	$const16	"energy_compensation"		%read{99,99} %write{2147483647,-1}
const	string	$const17	"as_metal"		%read{99,99} %write{2147483647,-1}
code in_bump_normal
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:231
#     normal in_bump_normal = N
	assign		in_bump_normal N 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl"} %line{231} %argrw{"wr"}
code ___main___
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:329
#     if (raytype("transparency"))
	raytype		$tmp1 $const1 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl"} %line{329} %argrw{"wr"}
	if		$tmp1 7 7 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:331
#         if (in_enable_matte)
	if		in_enable_matte 6 6 	%line{331} %argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:333
#             out_outMatteOpacity = as_matte(
	closure		out_outMatteOpacity $const2 in_matte_opacity_color in_matte_opacity 	%line{333} %argrw{"wrrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:337
#             out_outColor += out_outMatteOpacity;
	add		out_outColor out_outColor out_outMatteOpacity 	%line{337} %argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:339
#         return;
	exit	%line{339}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:342
#     if (raytype("shadow"))
	raytype		$tmp2 $const3 	%line{342} %argrw{"wr"}
	if		$tmp2 10 10 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:344
#         return;
	exit	%line{344}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:347
#     int ray_depth = 0;
	assign		ray_depth $const4 	%line{347} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:348
#     int status = getattribute("path:ray_depth", ray_depth);
	getattribute	status $const5 ray_depth 	%line{348} %argrw{"wrw"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:350
#     if (!status || ray_depth > in_maximum_ray_depth)
	eq		$tmp3 status $const4 	%line{350} %argrw{"wrr"}
	neq		$tmp4 $tmp3 $const4 	%argrw{"wrr"}
	if		$tmp4 15 18 	%argrw{"r"}
	gt		$tmp5 ray_depth in_maximum_ray_depth 	%argrw{"wrr"}
	neq		$tmp6 $tmp5 $const4 	%argrw{"wrr"}
	assign		$tmp4 $tmp6 	%argrw{"wr"}
	if		$tmp4 20 20 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:352
#         return;
	exit	%line{352}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:357
#     if (in_distribution == 0)
	eq		$tmp7 in_distribution $const4 	%line{357} %argrw{"wrr"}
	if		$tmp7 23 26 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:359
#         distribution = "beckmann";
	assign		distribution $const6 	%line{359} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:361
#     else if (in_distribution == 1)
	eq		$tmp8 in_distribution $const7 	%line{361} %argrw{"wrr"}
	if		$tmp8 26 26 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:363
#         distribution = "ggx";
	assign		distribution $const8 	%line{363} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:377
#     vector tangent = Tn;
	assign		tangent Tn 	%line{377} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:378
#     normal Nn = normalize(in_bump_normal);
	normalize	Nn in_bump_normal 	%line{378} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:380
#     if (in_anisotropy_amount > 0.0)
	gt		$tmp9 in_anisotropy_amount $const9 	%line{380} %argrw{"wrr"}
	if		$tmp9 99 99 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:382
#         if (in_anisotropy_mode == 0)
	eq		$tmp10 in_anisotropy_mode $const4 	%line{382} %argrw{"wrr"}
	if		$tmp10 43 44 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:384
#             if (isconnected(in_anisotropy_map))
	isconnected	$tmp11 in_anisotropy_map 	%line{384} %argrw{"wr"}
	if		$tmp11 43 43 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:387
#                     (vector) in_anisotropy_map * 2.0 - 1.0);
	mul		$tmp12 in_anisotropy_map $const10 	%line{387} %argrw{"wrr"}
	sub		$tmp13 $tmp12 $const11 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:386
#                 vector vector_map = normalize(
	normalize	___377_vector_map $tmp13 	%line{386} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:389
#                 tangent = normalize(vector_map[0] * Tn + vector_map[1] * Bn);
	compref		$tmp14 ___377_vector_map $const4 	%line{389} %argrw{"wrr"}
	mul		$tmp15 $tmp14 Tn 	%argrw{"wrr"}
	compref		$tmp16 ___377_vector_map $const7 	%argrw{"wrr"}
	mul		$tmp17 $tmp16 Bn 	%argrw{"wrr"}
	add		$tmp18 $tmp15 $tmp17 	%argrw{"wrr"}
	normalize	tangent $tmp18 	%argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:394
#             tangent = in_anisotropy_direction;
	assign		tangent in_anisotropy_direction 	%line{394} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:397
#         if (in_anisotropy_angle > 0.0)
	gt		$tmp19 in_anisotropy_angle $const9 	%line{397} %argrw{"wrr"}
	if		$tmp19 99 99 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:401
#                 in_anisotropy_angle * M_2PI,
	mul		$tmp20 in_anisotropy_angle $const12 	%line{401} %argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:403
#                 point(Nn));
	assign		$tmp22 Nn 	%line{403} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:399
#             tangent = rotate(
	functioncall	$const14 99 	%line{399} %argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp23 $tmp22 $const13 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp23 	%argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		$tmp20 ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const11 ___254_cosang 	%line{277} %argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const4 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const7 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const15 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp24 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp25 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp26 $const11 $tmp25 	%argrw{"wrr"}
	mul		$tmp27 $tmp26 ___254_cosang 	%argrw{"wrr"}
	add		$tmp28 $tmp24 $tmp27 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp29 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp30 $tmp29 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp31 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp33 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp34 $tmp33 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp35 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp36 $tmp34 $tmp35 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp37 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp38 $tmp37 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp39 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp40 $tmp38 $tmp39 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp41 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp42 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp43 $const11 $tmp42 	%argrw{"wrr"}
	mul		$tmp44 $tmp43 ___254_cosang 	%argrw{"wrr"}
	add		$tmp45 $tmp41 $tmp44 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp46 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp47 $tmp46 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp48 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp49 $tmp47 $tmp48 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp50 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp51 $tmp50 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp52 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp53 $tmp51 $tmp52 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp54 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp55 $tmp54 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp56 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp57 $tmp55 $tmp56 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp58 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp59 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp60 $const11 $tmp59 	%argrw{"wrr"}
	mul		$tmp61 $tmp60 ___254_cosang 	%argrw{"wrr"}
	add		$tmp62 $tmp58 $tmp61 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___254_M $tmp28 $tmp32 $tmp36 $const9 $tmp40 $tmp45 $tmp49 $const9 $tmp53 $tmp57 $tmp62 $const9 $const9 $const9 $const9 $const11 	%line{279} %argrw{"wrrrrrrrrrrrrrrrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp64 tangent $const13 	%line{292} %argrw{"wrr"}
	transformv	$tmp63 ___254_M $tmp64 	%argrw{"wrr"}
	add		tangent $tmp63 $const13 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:407
#     out_outColor += as_metal(
	closure		$tmp65 $const17 Nn tangent in_face_reflectance in_edge_reflectance in_edge_reflectance_weight in_roughness in_anisotropy_amount $const16 in_energy_compensation 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl"} %line{407} %argrw{"wrrrrrrrrrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_metal.osl:415
#         "energy_compensation", in_energy_compensation);
	add		out_outColor out_outColor $tmp65 	%line{415} %argrw{"wrr"}
	end

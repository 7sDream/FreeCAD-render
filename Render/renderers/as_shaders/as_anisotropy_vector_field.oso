OpenShadingLanguage 1.00
# Compiled by oslc 1.11.14
# options: -O2 -DNDEBUG -I/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders/ -I/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/include -o /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders/appleseed/as_anisotropy_vector_field.oso
shader as_anisotropy_vector_field	%meta{string,help,"Creates an anisotropy field vector from an input color."} %meta{string,icon,"asAnisotropyVectorField.png"} %meta{string,URL,"https://appleseed.readthedocs.io/projects/appleseed-maya/en/latest/shaders/utilities/as_anisotropy_vector_field.html"} %meta{string,as_node_name,"asAnisotropyVectorField"} %meta{string,as_category,"utility"} %meta{string,as_max_class_id,"755844571 356534419"} %meta{string,as_max_plugin_type,"texture"} %meta{int,as_maya_type_id,1210592} %meta{string,as_maya_classification,"drawdb/shader:rendernode/appleseed/utility"}
param	float	in_rotation_angle	0		%meta{string,as_maya_attribute_name,"rotationAngle"} %meta{string,as_maya_attribute_short_name,"rta"} %meta{float,min,-360} %meta{float,max,360} %meta{string,widget,"angle"} %meta{string,label,"Rotation Angle"} %meta{string,page,"Field"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,1} %meta{int,as_maya_attribute_hidden,0} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{3,7} %write{2147483647,-1}
param	color	in_color	1 1 1		%meta{string,as_maya_attribute_name,"color"} %meta{string,as_maya_attribute_short_name,"c"} %meta{string,label,"Field Color"} %meta{string,page,"Field"}  %read{60,62} %write{2147483647,-1}
param	int	in_field_mode	0		%meta{string,as_maya_attribute_name,"fieldMode"} %meta{string,as_maya_attribute_short_name,"fm"} %meta{string,widget,"mapper"} %meta{string,options,"Red Green as XY:0|Red Blue as XY:1"} %meta{string,label,"Field Mode"} %meta{string,page,"Field"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{65,65} %write{2147483647,-1}
param	float	in_rotation_value	0		%meta{string,as_maya_attribute_name,"rotationValue"} %meta{string,as_maya_attribute_short_name,"rtv"} %meta{float,min,0} %meta{float,max,1} %meta{string,help,"Rotation value, mapping [0,1] to [0,360] degrees."} %meta{string,label,"Rotation Value"} %meta{string,page,"Rotation"}  %read{77,89} %write{2147483647,-1}
param	int	in_rotation_mode	0		%meta{string,as_maya_attribute_name,"rotationMode"} %meta{string,as_maya_attribute_short_name,"rtm"} %meta{string,widget,"mapper"} %meta{string,options,"Centered:0|Absolute:1"} %meta{string,help,"Scale the rotation value to [-1,1] and apply rotation to both directions around the main anisotropy vector,\n or leave it at [0,1] range, and add it."} %meta{string,label,"Rotation Mode"} %meta{string,page,"Rotation"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{84,84} %write{2147483647,-1}
param	int	in_normalize_output	1		%meta{string,as_maya_attribute_name,"normalizeOutput"} %meta{string,as_maya_attribute_short_name,"no"} %meta{string,widget,"checkBox"} %meta{string,label,"Normalize Output"} %meta{string,page,"Output"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{144,144} %write{2147483647,-1}
param	normal	in_surface_normal	0 0 0		%meta{string,as_maya_attribute_name,"normalCamera"} %meta{string,as_maya_attribute_short_name,"n"} %meta{string,label,"Surface Normal"} %meta{string,page,"Normal"}  %read{1,1} %write{0,0} %initexpr
param	vector	Tn	0 0 0		%meta{int,lockgeom,0} %meta{string,widget,"null"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{2,72} %write{2147483647,-1}
param	vector	Bn	0 0 0		%meta{int,lockgeom,0} %meta{string,widget,"null"} %meta{int,as_maya_attribute_connectable,0} %meta{int,as_maya_attribute_keyable,0} %meta{int,as_maya_attribute_hidden,1} %meta{int,as_blender_input_socket,0} %meta{int,gafferNoduleLayoutVisible,0}  %read{74,74} %write{2147483647,-1}
oparam	vector	out_anisotropy_vector	0 0 0		%meta{string,as_maya_attribute_name,"anisotropyVector"} %meta{string,as_maya_attribute_short_name,"av"} %meta{string,label,"Anisotropy Vector"}  %read{2147483647,-1} %write{146,146}
global	normal	N	%read{0,0} %write{2147483647,-1}
local	vector	___254_axis	%read{14,100} %write{11,95}
local	float	___254_cosang	%read{13,138} %write{12,96}
local	float	___254_sinang	%read{24,133} %write{12,96}
local	float	___254_cosang1	%read{23,132} %write{13,97}
local	float	___254_x	%read{17,133} %write{14,98}
local	float	___254_y	%read{22,131} %write{15,99}
local	float	___254_z	%read{24,136} %write{16,100}
local	matrix	___254_M	%read{58,142} %write{56,140}
local	normal	Nn	%read{8,92} %write{1,1}
local	vector	tangent	%read{57,146} %write{2,145}
local	vector	___361_vector_map	%read{67,73} %write{64,70}
local	float	___363_offset	%read{90,96} %write{88,89}
const	float	$const1	0		%read{3,140} %write{2147483647,-1}
temp	int	$tmp1	%read{4,4} %write{3,3}
temp	float	$tmp2	%read{12,12} %write{7,7}
const	string	$const2	"radians"		%read{5,5} %write{2147483647,-1}
const	float	$const3	3.14159274		%read{6,6} %write{2147483647,-1}
const	float	$const4	180		%read{6,6} %write{2147483647,-1}
temp	float	$tmp3	%read{7,7} %write{6,6}
const	point	$const5	0 0 0		%read{10,143} %write{2147483647,-1}
temp	point	$tmp5	%read{10,10} %write{8,8}
const	string	$const6	"rotate"		%read{9,93} %write{2147483647,-1}
temp	vector	$tmp6	%read{11,11} %write{10,10}
const	float	$const7	1		%read{13,140} %write{2147483647,-1}
const	int	$const8	0		%read{14,98} %write{2147483647,-1}
const	int	$const9	1		%read{15,99} %write{2147483647,-1}
const	int	$const10	2		%read{16,100} %write{2147483647,-1}
temp	float	$tmp7	%read{21,21} %write{17,17}
temp	float	$tmp8	%read{19,19} %write{18,18}
temp	float	$tmp9	%read{20,20} %write{19,19}
temp	float	$tmp10	%read{21,21} %write{20,20}
temp	float	$tmp11	%read{56,56} %write{21,21}
temp	float	$tmp12	%read{23,23} %write{22,22}
temp	float	$tmp13	%read{25,25} %write{23,23}
temp	float	$tmp14	%read{25,25} %write{24,24}
temp	float	$tmp15	%read{56,56} %write{25,25}
temp	float	$tmp16	%read{27,27} %write{26,26}
temp	float	$tmp17	%read{29,29} %write{27,27}
temp	float	$tmp18	%read{29,29} %write{28,28}
temp	float	$tmp19	%read{56,56} %write{29,29}
temp	float	$tmp20	%read{31,31} %write{30,30}
temp	float	$tmp21	%read{33,33} %write{31,31}
temp	float	$tmp22	%read{33,33} %write{32,32}
temp	float	$tmp23	%read{56,56} %write{33,33}
temp	float	$tmp24	%read{38,38} %write{34,34}
temp	float	$tmp25	%read{36,36} %write{35,35}
temp	float	$tmp26	%read{37,37} %write{36,36}
temp	float	$tmp27	%read{38,38} %write{37,37}
temp	float	$tmp28	%read{56,56} %write{38,38}
temp	float	$tmp29	%read{40,40} %write{39,39}
temp	float	$tmp30	%read{42,42} %write{40,40}
temp	float	$tmp31	%read{42,42} %write{41,41}
temp	float	$tmp32	%read{56,56} %write{42,42}
temp	float	$tmp33	%read{44,44} %write{43,43}
temp	float	$tmp34	%read{46,46} %write{44,44}
temp	float	$tmp35	%read{46,46} %write{45,45}
temp	float	$tmp36	%read{56,56} %write{46,46}
temp	float	$tmp37	%read{48,48} %write{47,47}
temp	float	$tmp38	%read{50,50} %write{48,48}
temp	float	$tmp39	%read{50,50} %write{49,49}
temp	float	$tmp40	%read{56,56} %write{50,50}
temp	float	$tmp41	%read{55,55} %write{51,51}
temp	float	$tmp42	%read{53,53} %write{52,52}
temp	float	$tmp43	%read{54,54} %write{53,53}
temp	float	$tmp44	%read{55,55} %write{54,54}
temp	float	$tmp45	%read{56,56} %write{55,55}
temp	vector	$tmp46	%read{59,59} %write{58,58}
temp	vector	$tmp47	%read{58,58} %write{57,57}
temp	int	$tmp48	%read{61,61} %write{60,60}
const	float	$const11	2		%read{62,86} %write{2147483647,-1}
temp	vector	$tmp49	%read{63,63} %write{62,62}
temp	vector	$tmp50	%read{64,64} %write{63,63}
temp	int	$tmp51	%read{66,66} %write{65,65}
temp	float	$tmp52	%read{70,70} %write{67,67}
temp	float	$tmp53	%read{70,70} %write{68,68}
temp	float	$tmp54	%read{70,70} %write{69,69}
temp	float	$tmp55	%read{72,72} %write{71,71}
temp	vector	$tmp56	%read{75,75} %write{72,72}
temp	float	$tmp57	%read{74,74} %write{73,73}
temp	vector	$tmp58	%read{75,75} %write{74,74}
temp	vector	$tmp59	%read{76,76} %write{75,75}
temp	int	$tmp60	%read{78,78} %write{77,77}
temp	int	$tmp61	%read{79,83} %write{78,82}
temp	int	$tmp62	%read{81,81} %write{80,80}
temp	int	$tmp63	%read{82,82} %write{81,81}
temp	int	$tmp64	%read{85,85} %write{84,84}
temp	float	$tmp65	%read{87,87} %write{86,86}
temp	float	$tmp66	%read{88,88} %write{87,87}
const	float	$const12	6.28318548		%read{88,89} %write{2147483647,-1}
temp	int	$tmp67	%read{91,91} %write{90,90}
temp	point	$tmp69	%read{94,94} %write{92,92}
temp	vector	$tmp70	%read{95,95} %write{94,94}
temp	float	$tmp71	%read{105,105} %write{101,101}
temp	float	$tmp72	%read{103,103} %write{102,102}
temp	float	$tmp73	%read{104,104} %write{103,103}
temp	float	$tmp74	%read{105,105} %write{104,104}
temp	float	$tmp75	%read{140,140} %write{105,105}
temp	float	$tmp76	%read{107,107} %write{106,106}
temp	float	$tmp77	%read{109,109} %write{107,107}
temp	float	$tmp78	%read{109,109} %write{108,108}
temp	float	$tmp79	%read{140,140} %write{109,109}
temp	float	$tmp80	%read{111,111} %write{110,110}
temp	float	$tmp81	%read{113,113} %write{111,111}
temp	float	$tmp82	%read{113,113} %write{112,112}
temp	float	$tmp83	%read{140,140} %write{113,113}
temp	float	$tmp84	%read{115,115} %write{114,114}
temp	float	$tmp85	%read{117,117} %write{115,115}
temp	float	$tmp86	%read{117,117} %write{116,116}
temp	float	$tmp87	%read{140,140} %write{117,117}
temp	float	$tmp88	%read{122,122} %write{118,118}
temp	float	$tmp89	%read{120,120} %write{119,119}
temp	float	$tmp90	%read{121,121} %write{120,120}
temp	float	$tmp91	%read{122,122} %write{121,121}
temp	float	$tmp92	%read{140,140} %write{122,122}
temp	float	$tmp93	%read{124,124} %write{123,123}
temp	float	$tmp94	%read{126,126} %write{124,124}
temp	float	$tmp95	%read{126,126} %write{125,125}
temp	float	$tmp96	%read{140,140} %write{126,126}
temp	float	$tmp97	%read{128,128} %write{127,127}
temp	float	$tmp98	%read{130,130} %write{128,128}
temp	float	$tmp99	%read{130,130} %write{129,129}
temp	float	$tmp100	%read{140,140} %write{130,130}
temp	float	$tmp101	%read{132,132} %write{131,131}
temp	float	$tmp102	%read{134,134} %write{132,132}
temp	float	$tmp103	%read{134,134} %write{133,133}
temp	float	$tmp104	%read{140,140} %write{134,134}
temp	float	$tmp105	%read{139,139} %write{135,135}
temp	float	$tmp106	%read{137,137} %write{136,136}
temp	float	$tmp107	%read{138,138} %write{137,137}
temp	float	$tmp108	%read{139,139} %write{138,138}
temp	float	$tmp109	%read{140,140} %write{139,139}
temp	vector	$tmp110	%read{143,143} %write{142,142}
temp	vector	$tmp111	%read{142,142} %write{141,141}
code in_surface_normal
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:119
#     normal in_surface_normal = N
	assign		in_surface_normal N 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl"} %line{119} %argrw{"wr"}
code ___main___
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:155
#     normal Nn = normalize(in_surface_normal);
	normalize	Nn in_surface_normal 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl"} %line{155} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:156
#     vector tangent = Tn;
	assign		tangent Tn 	%line{156} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:158
#     if (in_rotation_angle != 0.0)
	neq		$tmp1 in_rotation_angle $const1 	%line{158} %argrw{"wrr"}
	if		$tmp1 60 60 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:162
#             radians(in_rotation_angle),
	functioncall	$const2 8 	%line{162} %argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:88
# float  radians (float x)  { return x*(M_PI/180.0); }
	div		$tmp3 $const3 $const4 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h"} %line{88} %argrw{"wrr"}
	mul		$tmp2 in_rotation_angle $tmp3 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:164
#             point(Nn));
	assign		$tmp5 Nn 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl"} %line{164} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:160
#         tangent = rotate(
	functioncall	$const6 60 	%line{160} %argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp6 $tmp5 $const5 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp6 	%argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		$tmp2 ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const7 ___254_cosang 	%line{277} %argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const8 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const9 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const10 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp7 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp8 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp9 $const7 $tmp8 	%argrw{"wrr"}
	mul		$tmp10 $tmp9 ___254_cosang 	%argrw{"wrr"}
	add		$tmp11 $tmp7 $tmp10 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp12 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp13 $tmp12 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp14 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp15 $tmp13 $tmp14 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp16 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp17 $tmp16 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp18 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp19 $tmp17 $tmp18 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp20 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp21 $tmp20 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp22 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp23 $tmp21 $tmp22 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp24 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp25 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp26 $const7 $tmp25 	%argrw{"wrr"}
	mul		$tmp27 $tmp26 ___254_cosang 	%argrw{"wrr"}
	add		$tmp28 $tmp24 $tmp27 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp29 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp30 $tmp29 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp31 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp32 $tmp30 $tmp31 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp33 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp34 $tmp33 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp35 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp36 $tmp34 $tmp35 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp37 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp38 $tmp37 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp39 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp40 $tmp38 $tmp39 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp41 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp42 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp43 $const7 $tmp42 	%argrw{"wrr"}
	mul		$tmp44 $tmp43 ___254_cosang 	%argrw{"wrr"}
	add		$tmp45 $tmp41 $tmp44 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___254_M $tmp11 $tmp15 $tmp19 $const1 $tmp23 $tmp28 $tmp32 $const1 $tmp36 $tmp40 $tmp45 $const1 $const1 $const1 $const1 $const7 	%line{279} %argrw{"wrrrrrrrrrrrrrrrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp47 tangent $const5 	%line{292} %argrw{"wrr"}
	transformv	$tmp46 ___254_M $tmp47 	%argrw{"wrr"}
	add		tangent $tmp46 $const5 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:167
#     if (isconnected(in_color))
	isconnected	$tmp48 in_color 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl"} %line{167} %argrw{"wr"}
	if		$tmp48 77 77 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:169
#         vector vector_map = normalize((vector) in_color * 2.0 - 1.0);
	mul		$tmp49 in_color $const11 	%line{169} %argrw{"wrr"}
	sub		$tmp50 $tmp49 $const7 	%argrw{"wrr"}
	normalize	___361_vector_map $tmp50 	%argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:171
#         if (in_field_mode == 1)
	eq		$tmp51 in_field_mode $const9 	%line{171} %argrw{"wrr"}
	if		$tmp51 71 71 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:173
#             vector_map = vector(vector_map[0], vector_map[2], vector_map[1]);
	compref		$tmp52 ___361_vector_map $const8 	%line{173} %argrw{"wrr"}
	compref		$tmp53 ___361_vector_map $const10 	%argrw{"wrr"}
	compref		$tmp54 ___361_vector_map $const9 	%argrw{"wrr"}
	vector		___361_vector_map $tmp52 $tmp53 $tmp54 	%argrw{"wrrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:175
#         tangent = normalize(vector_map[0] * Tn + vector_map[1] * Bn);
	compref		$tmp55 ___361_vector_map $const8 	%line{175} %argrw{"wrr"}
	mul		$tmp56 $tmp55 Tn 	%argrw{"wrr"}
	compref		$tmp57 ___361_vector_map $const9 	%argrw{"wrr"}
	mul		$tmp58 $tmp57 Bn 	%argrw{"wrr"}
	add		$tmp59 $tmp56 $tmp58 	%argrw{"wrr"}
	normalize	tangent $tmp59 	%argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:178
#     if (in_rotation_value > 0.0 || isconnected(in_rotation_value))
	gt		$tmp60 in_rotation_value $const1 	%line{178} %argrw{"wrr"}
	neq		$tmp61 $tmp60 $const8 	%argrw{"wrr"}
	if		$tmp61 80 83 	%argrw{"r"}
	isconnected	$tmp62 in_rotation_value 	%argrw{"wr"}
	neq		$tmp63 $tmp62 $const8 	%argrw{"wrr"}
	assign		$tmp61 $tmp63 	%argrw{"wr"}
	if		$tmp61 144 144 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:180
#         float offset = (in_rotation_mode == 0)
	eq		$tmp64 in_rotation_mode $const8 	%line{180} %argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:181
#             ? (in_rotation_value * 2.0 - 1.0) * M_2PI
	if		$tmp64 89 90 	%line{181} %argrw{"r"}
	mul		$tmp65 in_rotation_value $const11 	%argrw{"wrr"}
	sub		$tmp66 $tmp65 $const7 	%argrw{"wrr"}
	mul		___363_offset $tmp66 $const12 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:182
#             : in_rotation_value * M_2PI;
	mul		___363_offset in_rotation_value $const12 	%line{182} %argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:184
#         if (offset != 0)
	neq		$tmp67 ___363_offset $const8 	%line{184} %argrw{"wrr"}
	if		$tmp67 144 144 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:186
#             tangent = rotate(tangent, offset, point(0), point(Nn));
	assign		$tmp69 Nn 	%line{186} %argrw{"wr"}
	functioncall	$const6 144 	%argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:274
#     vector axis = normalize (b - a);
	sub		$tmp70 $tmp69 $const5 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h"} %line{274} %argrw{"wrr"}
	normalize	___254_axis $tmp70 	%argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:276
#     sincos (angle, sinang, cosang);
	sincos		___363_offset ___254_sinang ___254_cosang 	%line{276} %argrw{"rww"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:277
#     float cosang1 = 1.0 - cosang;
	sub		___254_cosang1 $const7 ___254_cosang 	%line{277} %argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:278
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___254_x ___254_axis $const8 	%line{278} %argrw{"wrr"}
	compref		___254_y ___254_axis $const9 	%argrw{"wrr"}
	compref		___254_z ___254_axis $const10 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp71 ___254_x ___254_x 	%line{279} %argrw{"wrr"}
	mul		$tmp72 ___254_x ___254_x 	%argrw{"wrr"}
	sub		$tmp73 $const7 $tmp72 	%argrw{"wrr"}
	mul		$tmp74 $tmp73 ___254_cosang 	%argrw{"wrr"}
	add		$tmp75 $tmp71 $tmp74 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:280
#                        x * y * cosang1 + z * sinang,
	mul		$tmp76 ___254_x ___254_y 	%line{280} %argrw{"wrr"}
	mul		$tmp77 $tmp76 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp78 ___254_z ___254_sinang 	%argrw{"wrr"}
	add		$tmp79 $tmp77 $tmp78 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:281
#                        x * z * cosang1 - y * sinang,
	mul		$tmp80 ___254_x ___254_z 	%line{281} %argrw{"wrr"}
	mul		$tmp81 $tmp80 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp82 ___254_y ___254_sinang 	%argrw{"wrr"}
	sub		$tmp83 $tmp81 $tmp82 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:283
#                        x * y * cosang1 - z * sinang,
	mul		$tmp84 ___254_x ___254_y 	%line{283} %argrw{"wrr"}
	mul		$tmp85 $tmp84 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp86 ___254_z ___254_sinang 	%argrw{"wrr"}
	sub		$tmp87 $tmp85 $tmp86 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:284
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp88 ___254_y ___254_y 	%line{284} %argrw{"wrr"}
	mul		$tmp89 ___254_y ___254_y 	%argrw{"wrr"}
	sub		$tmp90 $const7 $tmp89 	%argrw{"wrr"}
	mul		$tmp91 $tmp90 ___254_cosang 	%argrw{"wrr"}
	add		$tmp92 $tmp88 $tmp91 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:285
#                        y * z * cosang1 + x * sinang,
	mul		$tmp93 ___254_y ___254_z 	%line{285} %argrw{"wrr"}
	mul		$tmp94 $tmp93 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp95 ___254_x ___254_sinang 	%argrw{"wrr"}
	add		$tmp96 $tmp94 $tmp95 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:287
#                        x * z * cosang1 + y * sinang,
	mul		$tmp97 ___254_x ___254_z 	%line{287} %argrw{"wrr"}
	mul		$tmp98 $tmp97 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp99 ___254_y ___254_sinang 	%argrw{"wrr"}
	add		$tmp100 $tmp98 $tmp99 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:288
#                        y * z * cosang1 - x * sinang,
	mul		$tmp101 ___254_y ___254_z 	%line{288} %argrw{"wrr"}
	mul		$tmp102 $tmp101 ___254_cosang1 	%argrw{"wrr"}
	mul		$tmp103 ___254_x ___254_sinang 	%argrw{"wrr"}
	sub		$tmp104 $tmp102 $tmp103 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:289
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp105 ___254_z ___254_z 	%line{289} %argrw{"wrr"}
	mul		$tmp106 ___254_z ___254_z 	%argrw{"wrr"}
	sub		$tmp107 $const7 $tmp106 	%argrw{"wrr"}
	mul		$tmp108 $tmp107 ___254_cosang 	%argrw{"wrr"}
	add		$tmp109 $tmp105 $tmp108 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:279
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___254_M $tmp75 $tmp79 $tmp83 $const1 $tmp87 $tmp92 $tmp96 $const1 $tmp100 $tmp104 $tmp109 $const1 $const1 $const1 $const1 $const7 	%line{279} %argrw{"wrrrrrrrrrrrrrrrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/sandbox/shaders//stdosl.h:292
#     return transform (M, p-a) + a;
	sub		$tmp111 tangent $const5 	%line{292} %argrw{"wrr"}
	transformv	$tmp110 ___254_M $tmp111 	%argrw{"wrr"}
	add		tangent $tmp110 $const5 	%argrw{"wrr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:190
#     if (in_normalize_output)
	if		in_normalize_output 146 146 	%filename{"/var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl"} %line{190} %argrw{"r"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:192
#         tangent = normalize(tangent);
	normalize	tangent tangent 	%line{192} %argrw{"wr"}
# /var/cache/private/pikaur/build/appleseed-git/src/appleseed-git/src/appleseed.shaders/src/appleseed/as_anisotropy_vector_field.osl:195
#     out_anisotropy_vector = tangent;
	assign		out_anisotropy_vector tangent 	%line{195} %argrw{"wr"}
	end
